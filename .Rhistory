sqlite_files <- sqlite_files[str_detect(sqlite_files,'\\.sqlite')] # only sqlite files
sqlite_files <- sqlite_files[!str_detect(sqlite_files,'_CP')] # no checkpoint files
doi <- map(sqlite_files, function(f){
db <- dbConnect(SQLite(), dbname = f)
sampled_duration <- dbGetQuery(db, 'SELECT duration FROM sampled_duration')
# print(head(sampled_duration))
return(sampled_duration)
}) %>% bind_rows()
mean_doi <- mean(doi$duration)
TRANSITION_RATE_NOT_IMMUNE <- 1/(mean_doi/N_GENES_PER_STRAIN)
setwd('~/Documents/malaria_interventions/')
return(TRANSITION_RATE_NOT_IMMUNE)
}
# Function to create the necesary files and pipeline for a single run of an experiment.
# Each run has its own random seed across experiments.
create_run <- function(design_ID, run, RANDOM_SEED){
# Regime
parameter_space <- design$PS[design_ID]
scenario <- design$Scenario[design_ID]
experiment <- design$Experiment[design_ID] # Use 00 for checkpoints and control
base_name <- paste('PS',parameter_space,'_',scenario,'_E',experiment,'_R',run,sep='')
param_data <- get_parameter_reference()
# General parameters
param_data[param_data$param=='RANDOM_SEED',] <- set_parameter(param_data, 'RANDOM_SEED', RANDOM_SEED)
T_END <- design$T_END[design_ID]
param_data[param_data$param=='T_END',] <- set_parameter(param_data, 'T_END', T_END)
param_data[param_data$param=='VERIFICATION_ON',] <- set_parameter(param_data, 'VERIFICATION_ON', 'False')
param_data[param_data$param=='VERIFICATION_PERIOD',] <- set_parameter(param_data, 'VERIFICATION_PERIOD', T_END)
# Scenario
if(scenario=='N'){
param_data[param_data$param=='SELECTION_MODE',] <- set_parameter(param_data, 'SELECTION_MODE', 'NEUTRALITY')
TRANSITION_RATE_NOT_IMMUNE <- set_transition_rate(parameter_space, experiment='01')
param_data[param_data$param=='TRANSITION_RATE_NOT_IMMUNE',] <- set_parameter(param_data, 'TRANSITION_RATE_NOT_IMMUNE', TRANSITION_RATE_NOT_IMMUNE)
}
if(scenario=='G'){
param_data[param_data$param=='SELECTION_MODE',] <- set_parameter(param_data, 'SELECTION_MODE', 'GENERAL_IMMUNITY')
}
# Biting rates
BITING_RATE_MEAN <- design$BITING_RATE_MEAN[design_ID]
mathematica_file <- design$DAILY_BITING_RATE_DISTRIBUTION[design_ID]
biting_rate_mathematica <- read_csv(mathematica_file, col_names = c('day','num_mosquitos'))
DAILY_BITING_RATE_DISTRIBUTION <- biting_rate_mathematica$num_mosquitos
param_data[param_data$param=='BITING_RATE_MEAN',] <- set_parameter(param_data, 'BITING_RATE_MEAN', paste('[',BITING_RATE_MEAN,']',sep=''))
param_data[param_data$param=='DAILY_BITING_RATE_DISTRIBUTION',] <- set_parameter(param_data, 'DAILY_BITING_RATE_DISTRIBUTION', paste('[',paste(DAILY_BITING_RATE_DISTRIBUTION, collapse=','),']',sep=''))
# Genetic diversity
N_GENES_INITIAL <- design$N_GENES_INITIAL[design_ID]
param_data[param_data$param=='N_GENES_INITIAL',] <- set_parameter(param_data, 'N_GENES_INITIAL', N_GENES_INITIAL)
N_ALLELES_INITIAL <- design$N_ALLELES_INITIAL[design_ID]
param_data[param_data$param=='N_ALLELES_INITIAL',] <- set_parameter(param_data, 'N_ALLELES_INITIAL', paste('N_LOCI*[',N_ALLELES_INITIAL,']',sep=''))
# Checkpoints
T_BURNIN <- design$T_BURNIN[design_ID]
if (experiment == '00'){
param_data[param_data$param=='SAMPLE_DB_FILENAME',] <- set_parameter(param_data, 'SAMPLE_DB_FILENAME', paste('\'\"',base_name,'.sqlite\"\'',sep='')) # The run ID will be added while running the job (in the sbatch execution).
param_data[param_data$param=='SAVE_TO_CHECKPOINT',] <- set_parameter(param_data, 'SAVE_TO_CHECKPOINT', 'True')
param_data[param_data$param=='CHECKPOINT_SAVE_PERIOD',] <- set_parameter(param_data, 'CHECKPOINT_SAVE_PERIOD', T_END) # The save period should be the T_END
param_data[param_data$param=='CHECKPOINT_SAVE_FILENAME',] <- set_parameter(param_data, 'CHECKPOINT_SAVE_FILENAME', paste('\'\"',base_name,'_CP.sqlite\"\'',sep=''))
param_data[param_data$param=='LOAD_FROM_CHECKPOINT',] <- set_parameter(param_data, 'LOAD_FROM_CHECKPOINT', 'False')
param_data[param_data$param=='CHECKPOINT_LOAD_FILENAME',] <- set_parameter(param_data, 'CHECKPOINT_LOAD_FILENAME', '\'\"\"\'')
param_data[param_data$param=='T_BURNIN',] <- set_parameter(param_data, 'T_BURNIN', T_BURNIN)
}
if (experiment != '00'){ # This section prepares a parameter file to load a checkpoint and run an experiment
param_data[param_data$param=='SAMPLE_DB_FILENAME',] <- set_parameter(param_data, 'SAMPLE_DB_FILENAME', paste('\'\"',base_name,'.sqlite\"\'',sep='')) # The run ID will be added while running the job (in the sbatch execution).
param_data[param_data$param=='SAVE_TO_CHECKPOINT',] <- set_parameter(param_data, 'SAVE_TO_CHECKPOINT', 'False')
param_data[param_data$param=='CHECKPOINT_SAVE_PERIOD',] <- set_parameter(param_data, 'CHECKPOINT_SAVE_PERIOD', 0)
param_data[param_data$param=='CHECKPOINT_SAVE_FILENAME',] <- set_parameter(param_data, 'CHECKPOINT_SAVE_FILENAME', '\'\"\"\'')
param_data[param_data$param=='LOAD_FROM_CHECKPOINT',] <- set_parameter(param_data, 'LOAD_FROM_CHECKPOINT', 'True')
param_data[param_data$param=='CHECKPOINT_LOAD_FILENAME',] <- set_parameter(param_data, 'CHECKPOINT_LOAD_FILENAME', paste('\'\"PS',parameter_space,'_',scenario,'_E00','_R',run,'_CP.sqlite\"\'',sep=''))
param_data[param_data$param=='T_BURNIN',] <- set_parameter(param_data, 'T_BURNIN', T_BURNIN) # The burnin value should be the value where the checkpoint was taken
}
# Write parameter file
output_file=paste(base_name,'.py',sep = '')
param_data$output <- paste(param_data$param,param_data$value,sep='=')
write_lines(param_data$output, output_file)
}
generate_files(row_range = 13:15, run_range = 1)
# Function to create the necesary files and pipeline for a single run of an experiment.
# Each run has its own random seed across experiments.
create_run <- function(design_ID, run, RANDOM_SEED){
# Regime
parameter_space <- design$PS[design_ID]
scenario <- design$Scenario[design_ID]
experiment <- design$Experiment[design_ID] # Use 00 for checkpoints and control
base_name <- paste('PS',parameter_space,'_',scenario,'_E',experiment,'_R',run,sep='')
param_data <- get_parameter_reference()
# General parameters
param_data[param_data$param=='RANDOM_SEED',] <- set_parameter(param_data, 'RANDOM_SEED', RANDOM_SEED)
T_END <- design$T_END[design_ID]
param_data[param_data$param=='T_END',] <- set_parameter(param_data, 'T_END', T_END)
param_data[param_data$param=='VERIFICATION_ON',] <- set_parameter(param_data, 'VERIFICATION_ON', 'False')
param_data[param_data$param=='VERIFICATION_PERIOD',] <- set_parameter(param_data, 'VERIFICATION_PERIOD', T_END)
# Scenario
if(scenario=='N'){
param_data[param_data$param=='SELECTION_MODE',] <- set_parameter(param_data, 'SELECTION_MODE', "\'NEUTRALITY\'")
TRANSITION_RATE_NOT_IMMUNE <- set_transition_rate(parameter_space, experiment='01')
param_data[param_data$param=='TRANSITION_RATE_NOT_IMMUNE',] <- set_parameter(param_data, 'TRANSITION_RATE_NOT_IMMUNE', TRANSITION_RATE_NOT_IMMUNE)
}
if(scenario=='G'){
param_data[param_data$param=='SELECTION_MODE',] <- set_parameter(param_data, 'SELECTION_MODE', 'GENERAL_IMMUNITY')
}
# Biting rates
BITING_RATE_MEAN <- design$BITING_RATE_MEAN[design_ID]
mathematica_file <- design$DAILY_BITING_RATE_DISTRIBUTION[design_ID]
biting_rate_mathematica <- read_csv(mathematica_file, col_names = c('day','num_mosquitos'))
DAILY_BITING_RATE_DISTRIBUTION <- biting_rate_mathematica$num_mosquitos
param_data[param_data$param=='BITING_RATE_MEAN',] <- set_parameter(param_data, 'BITING_RATE_MEAN', paste('[',BITING_RATE_MEAN,']',sep=''))
param_data[param_data$param=='DAILY_BITING_RATE_DISTRIBUTION',] <- set_parameter(param_data, 'DAILY_BITING_RATE_DISTRIBUTION', paste('[',paste(DAILY_BITING_RATE_DISTRIBUTION, collapse=','),']',sep=''))
# Genetic diversity
N_GENES_INITIAL <- design$N_GENES_INITIAL[design_ID]
param_data[param_data$param=='N_GENES_INITIAL',] <- set_parameter(param_data, 'N_GENES_INITIAL', N_GENES_INITIAL)
N_ALLELES_INITIAL <- design$N_ALLELES_INITIAL[design_ID]
param_data[param_data$param=='N_ALLELES_INITIAL',] <- set_parameter(param_data, 'N_ALLELES_INITIAL', paste('N_LOCI*[',N_ALLELES_INITIAL,']',sep=''))
# Checkpoints
T_BURNIN <- design$T_BURNIN[design_ID]
if (experiment == '00'){
param_data[param_data$param=='SAMPLE_DB_FILENAME',] <- set_parameter(param_data, 'SAMPLE_DB_FILENAME', paste('\'\"',base_name,'.sqlite\"\'',sep='')) # The run ID will be added while running the job (in the sbatch execution).
param_data[param_data$param=='SAVE_TO_CHECKPOINT',] <- set_parameter(param_data, 'SAVE_TO_CHECKPOINT', 'True')
param_data[param_data$param=='CHECKPOINT_SAVE_PERIOD',] <- set_parameter(param_data, 'CHECKPOINT_SAVE_PERIOD', T_END) # The save period should be the T_END
param_data[param_data$param=='CHECKPOINT_SAVE_FILENAME',] <- set_parameter(param_data, 'CHECKPOINT_SAVE_FILENAME', paste('\'\"',base_name,'_CP.sqlite\"\'',sep=''))
param_data[param_data$param=='LOAD_FROM_CHECKPOINT',] <- set_parameter(param_data, 'LOAD_FROM_CHECKPOINT', 'False')
param_data[param_data$param=='CHECKPOINT_LOAD_FILENAME',] <- set_parameter(param_data, 'CHECKPOINT_LOAD_FILENAME', '\'\"\"\'')
param_data[param_data$param=='T_BURNIN',] <- set_parameter(param_data, 'T_BURNIN', T_BURNIN)
}
if (experiment != '00'){ # This section prepares a parameter file to load a checkpoint and run an experiment
param_data[param_data$param=='SAMPLE_DB_FILENAME',] <- set_parameter(param_data, 'SAMPLE_DB_FILENAME', paste('\'\"',base_name,'.sqlite\"\'',sep='')) # The run ID will be added while running the job (in the sbatch execution).
param_data[param_data$param=='SAVE_TO_CHECKPOINT',] <- set_parameter(param_data, 'SAVE_TO_CHECKPOINT', 'False')
param_data[param_data$param=='CHECKPOINT_SAVE_PERIOD',] <- set_parameter(param_data, 'CHECKPOINT_SAVE_PERIOD', 0)
param_data[param_data$param=='CHECKPOINT_SAVE_FILENAME',] <- set_parameter(param_data, 'CHECKPOINT_SAVE_FILENAME', '\'\"\"\'')
param_data[param_data$param=='LOAD_FROM_CHECKPOINT',] <- set_parameter(param_data, 'LOAD_FROM_CHECKPOINT', 'True')
param_data[param_data$param=='CHECKPOINT_LOAD_FILENAME',] <- set_parameter(param_data, 'CHECKPOINT_LOAD_FILENAME', paste('\'\"PS',parameter_space,'_',scenario,'_E00','_R',run,'_CP.sqlite\"\'',sep=''))
param_data[param_data$param=='T_BURNIN',] <- set_parameter(param_data, 'T_BURNIN', T_BURNIN) # The burnin value should be the value where the checkpoint was taken
}
# Write parameter file
output_file=paste(base_name,'.py',sep = '')
param_data$output <- paste(param_data$param,param_data$value,sep='=')
write_lines(param_data$output, output_file)
}
setwd('~/Documents/malaria_interventions/')
generate_files(row_range = 13:15, run_range = 1)
# Arguments ---------------------------------------------------------------
setwd('~/Documents/malaria_interventions_sqlite')
# setwd('~/GitHub/')
parameter_space <- '03'
scenario <- 'N'
experiment <- '00' # 00 is for the checkpoint and control
run <- 1
base_name <- paste('PS',parameter_space,'_',scenario,'_E',experiment,'_R',run,sep='')
sqlite_file <- paste(base_name,'.sqlite',sep='')
parameter_file <- paste(base_name,'.py',sep='')
# Extract from sqlite -----------------------------------------------------
db <- dbConnect(SQLite(), dbname = sqlite_file)
# sampled_hosts <- dbGetQuery(db, 'SELECT * FROM sampled_hosts')
summary_general <- dbGetQuery(db, 'SELECT * FROM summary')
sampled_infections <- dbGetQuery(db, 'SELECT * FROM sampled_infections')
# Main code ---------------------------------------------------------------
if (nrow(summary_general)%%30==1){# The beginning of the data set has a timestap of 0 and this line is unnecesary. So remove it
summary_general <- summary_general[-1,]
}
# Prevalence
summary_general$prevalence <- summary_general$n_infected/10^4
#EIR
#EIR=biting_rate * prevalence
biting_rate <- get_biting_rate(parameter_file)
summary_general$b <- NA
summary_general$b[] <- biting_rate # The [] is for recycling the biting_rate
summary_general$EIR <- summary_general$prevalence*summary_general$b*30
# MOI
meanMOI <- sampled_infections %>% group_by(time, host_id) %>% summarise(MOI=length(strain_id)) %>% group_by(time) %>% summarise(meanMOI=mean(MOI))
summary_general <- inner_join(summary_general, meanMOI)
# Host age structure
hosts <- dbGetQuery(db, 'SELECT * FROM hosts')
names(hosts)[1] <- 'host_id'
hosts$lifespan <- round((hosts$death_time-hosts$birth_time)/30)
hosts <- subset(hosts, host_id%in%sampled_infections$host_id)
sampled_infections <- left_join(sampled_infections, hosts, by='host_id')
sampled_infections$host_age <- round((sampled_infections$time-sampled_infections$birth_time)/30)
sampled_infections %>% ggplot(aes(x=host_age))+geom_histogram() + labs(x='Infected host age (months)') # Plot the age structure of infected hosts
summary_general %>%
select(-n_infected) %>%
# filter(time>10000) %>%
gather(variable, value, -time) %>%
ggplot(aes(time, value, color=variable))+
geom_line()+
facet_wrap(~variable, scales = 'free')+
mytheme+theme(legend.position = 'none')
# Annual biting rate is given by taking an average over 12 months and multiplying by 30.
summary_general$year <- gl(n = max(summary_general$time)/360, length = nrow(summary_general), k = 1)
summary_general %>% group_by(year) %>% summarise(eir_y=mean(EIR)*30)
summary_general$month <- gl(n = 12, k = 1, length = nrow(summary_general),labels = c('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'), ordered = F)
summary_general %>%
ggplot(aes(x=month,y=EIR))+
geom_boxplot()+
geom_point(stat='summary', fun.y=mean, color='red')+
stat_summary(fun.y=mean, geom="line")+mytheme
# Create an object with the results
summary_general$PS <- parameter_space
summary_general$exp <- experiment
summary_general$scenario <- scenario
summary_general$run <- run
assign(paste('results_',base_name,sep=''), summary_general)
experiment <- '01' # 00 is for the checkpoint and control
run <- 1
base_name <- paste('PS',parameter_space,'_',scenario,'_E',experiment,'_R',run,sep='')
sqlite_file <- paste(base_name,'.sqlite',sep='')
parameter_file <- paste(base_name,'.py',sep='')
# Extract from sqlite -----------------------------------------------------
db <- dbConnect(SQLite(), dbname = sqlite_file)
# sampled_hosts <- dbGetQuery(db, 'SELECT * FROM sampled_hosts')
summary_general <- dbGetQuery(db, 'SELECT * FROM summary')
sampled_infections <- dbGetQuery(db, 'SELECT * FROM sampled_infections')
# Main code ---------------------------------------------------------------
if (nrow(summary_general)%%30==1){# The beginning of the data set has a timestap of 0 and this line is unnecesary. So remove it
summary_general <- summary_general[-1,]
}
# Prevalence
summary_general$prevalence <- summary_general$n_infected/10^4
#EIR
#EIR=biting_rate * prevalence
biting_rate <- get_biting_rate(parameter_file)
summary_general$b <- NA
summary_general$b[] <- biting_rate # The [] is for recycling the biting_rate
summary_general$EIR <- summary_general$prevalence*summary_general$b*30
# MOI
meanMOI <- sampled_infections %>% group_by(time, host_id) %>% summarise(MOI=length(strain_id)) %>% group_by(time) %>% summarise(meanMOI=mean(MOI))
summary_general <- inner_join(summary_general, meanMOI)
# Host age structure
hosts <- dbGetQuery(db, 'SELECT * FROM hosts')
names(hosts)[1] <- 'host_id'
hosts$lifespan <- round((hosts$death_time-hosts$birth_time)/30)
hosts <- subset(hosts, host_id%in%sampled_infections$host_id)
sampled_infections <- left_join(sampled_infections, hosts, by='host_id')
sampled_infections$host_age <- round((sampled_infections$time-sampled_infections$birth_time)/30)
sampled_infections %>% ggplot(aes(x=host_age))+geom_histogram() + labs(x='Infected host age (months)') # Plot the age structure of infected hosts
summary_general %>%
select(-n_infected) %>%
# filter(time>10000) %>%
gather(variable, value, -time) %>%
ggplot(aes(time, value, color=variable))+
geom_line()+
facet_wrap(~variable, scales = 'free')+
mytheme+theme(legend.position = 'none')
# Annual biting rate is given by taking an average over 12 months and multiplying by 30.
summary_general$year <- gl(n = max(summary_general$time)/360, length = nrow(summary_general), k = 1)
summary_general %>% group_by(year) %>% summarise(eir_y=mean(EIR)*30)
summary_general$month <- gl(n = 12, k = 1, length = nrow(summary_general),labels = c('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'), ordered = F)
summary_general %>%
ggplot(aes(x=month,y=EIR))+
geom_boxplot()+
geom_point(stat='summary', fun.y=mean, color='red')+
stat_summary(fun.y=mean, geom="line")+mytheme
# Create an object with the results
summary_general$PS <- parameter_space
summary_general$exp <- experiment
summary_general$scenario <- scenario
summary_general$run <- run
assign(paste('results_',base_name,sep=''), summary_general)
experiment <- '02' # 00 is for the checkpoint and control
run <- 1
base_name <- paste('PS',parameter_space,'_',scenario,'_E',experiment,'_R',run,sep='')
sqlite_file <- paste(base_name,'.sqlite',sep='')
parameter_file <- paste(base_name,'.py',sep='')
# Extract from sqlite -----------------------------------------------------
db <- dbConnect(SQLite(), dbname = sqlite_file)
# sampled_hosts <- dbGetQuery(db, 'SELECT * FROM sampled_hosts')
summary_general <- dbGetQuery(db, 'SELECT * FROM summary')
sampled_infections <- dbGetQuery(db, 'SELECT * FROM sampled_infections')
# summary_general <- inner_join(sampled_hosts, summary_general)
# Main code ---------------------------------------------------------------
if (nrow(summary_general)%%30==1){# The beginning of the data set has a timestap of 0 and this line is unnecesary. So remove it
summary_general <- summary_general[-1,]
}
# Prevalence
summary_general$prevalence <- summary_general$n_infected/10^4
#EIR
#EIR=biting_rate * prevalence
biting_rate <- get_biting_rate(parameter_file)
summary_general$b <- NA
summary_general$b[] <- biting_rate # The [] is for recycling the biting_rate
summary_general$EIR <- summary_general$prevalence*summary_general$b*30
# MOI
meanMOI <- sampled_infections %>% group_by(time, host_id) %>% summarise(MOI=length(strain_id)) %>% group_by(time) %>% summarise(meanMOI=mean(MOI))
summary_general <- inner_join(summary_general, meanMOI)
# Host age structure
hosts <- dbGetQuery(db, 'SELECT * FROM hosts')
names(hosts)[1] <- 'host_id'
hosts$lifespan <- round((hosts$death_time-hosts$birth_time)/30)
hosts <- subset(hosts, host_id%in%sampled_infections$host_id)
sampled_infections <- left_join(sampled_infections, hosts, by='host_id')
sampled_infections$host_age <- round((sampled_infections$time-sampled_infections$birth_time)/30)
sampled_infections %>% ggplot(aes(x=host_age))+geom_histogram() + labs(x='Infected host age (months)') # Plot the age structure of infected hosts
summary_general %>%
select(-n_infected) %>%
# filter(time>10000) %>%
gather(variable, value, -time) %>%
ggplot(aes(time, value, color=variable))+
geom_line()+
facet_wrap(~variable, scales = 'free')+
mytheme+theme(legend.position = 'none')
# Annual biting rate is given by taking an average over 12 months and multiplying by 30.
summary_general$year <- gl(n = max(summary_general$time)/360, length = nrow(summary_general), k = 1)
summary_general %>% group_by(year) %>% summarise(eir_y=mean(EIR)*30)
summary_general$month <- gl(n = 12, k = 1, length = nrow(summary_general),labels = c('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'), ordered = F)
summary_general %>%
ggplot(aes(x=month,y=EIR))+
geom_boxplot()+
geom_point(stat='summary', fun.y=mean, color='red')+
stat_summary(fun.y=mean, geom="line")+mytheme
# Create an object with the results
summary_general$PS <- parameter_space
summary_general$exp <- experiment
summary_general$scenario <- scenario
summary_general$run <- run
assign(paste('results_',base_name,sep=''), summary_general)
num_years <- 100
months_in_year <- rep(c('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'), each=30)
calendar <- data.frame(running_day=seq(from = 1,to = 360*num_years,by=1),
year_sim=rep(1:num_years, each=360),
month_sim=rep(months_in_year,num_years),
day_sim=rep(1:30,num_years))
# calendar$layer <- ceiling((calendar$running_day-burnin)/30)
# calendar$burnin <- 'No'
# calendar$burnin[1:burnin] <- 'Yes'
calendar <- as_tibble(calendar)
calendar %>% filter(running_day==11000)
calendar %>% filter(running_day==10880)
calendar %>% filter(running_day==10930)
# Create parameter and job files -------------------------------------------
design <- loadExperiments_GoogleSheets() # Get data design
setwd('~/Documents/malaria_interventions/')
generate_files(row_range = 15, run_range = 1)
# Arguments ---------------------------------------------------------------
setwd('~/Documents/malaria_interventions_sqlite')
# setwd('~/GitHub/')
parameter_space <- '03'
scenario <- 'N'
experiment <- '02' # 00 is for the checkpoint and control
run <- 1
base_name <- paste('PS',parameter_space,'_',scenario,'_E',experiment,'_R',run,sep='')
sqlite_file <- paste(base_name,'.sqlite',sep='')
parameter_file <- paste(base_name,'.py',sep='')
# Extract from sqlite -----------------------------------------------------
db <- dbConnect(SQLite(), dbname = sqlite_file)
# sampled_hosts <- dbGetQuery(db, 'SELECT * FROM sampled_hosts')
summary_general <- dbGetQuery(db, 'SELECT * FROM summary')
sampled_infections <- dbGetQuery(db, 'SELECT * FROM sampled_infections')
# Main code ---------------------------------------------------------------
if (nrow(summary_general)%%30==1){# The beginning of the data set has a timestap of 0 and this line is unnecesary. So remove it
summary_general <- summary_general[-1,]
}
# Prevalence
summary_general$prevalence <- summary_general$n_infected/10^4
#EIR
#EIR=biting_rate * prevalence
biting_rate <- get_biting_rate(parameter_file)
summary_general$b <- NA
summary_general$b[] <- biting_rate # The [] is for recycling the biting_rate
summary_general$EIR <- summary_general$prevalence*summary_general$b*30
# MOI
meanMOI <- sampled_infections %>% group_by(time, host_id) %>% summarise(MOI=length(strain_id)) %>% group_by(time) %>% summarise(meanMOI=mean(MOI))
summary_general <- inner_join(summary_general, meanMOI)
# Host age structure
hosts <- dbGetQuery(db, 'SELECT * FROM hosts')
names(hosts)[1] <- 'host_id'
hosts$lifespan <- round((hosts$death_time-hosts$birth_time)/30)
hosts <- subset(hosts, host_id%in%sampled_infections$host_id)
sampled_infections <- left_join(sampled_infections, hosts, by='host_id')
sampled_infections$host_age <- round((sampled_infections$time-sampled_infections$birth_time)/30)
sampled_infections %>% ggplot(aes(x=host_age))+geom_histogram() + labs(x='Infected host age (months)') # Plot the age structure of infected hosts
summary_general %>%
select(-n_infected) %>%
# filter(time>10000) %>%
gather(variable, value, -time) %>%
ggplot(aes(time, value, color=variable))+
geom_line()+
facet_wrap(~variable, scales = 'free')+
mytheme+theme(legend.position = 'none')
# Annual biting rate is given by taking an average over 12 months and multiplying by 30.
summary_general$year <- gl(n = max(summary_general$time)/360, length = nrow(summary_general), k = 1)
summary_general %>% group_by(year) %>% summarise(eir_y=mean(EIR)*30)
summary_general$month <- gl(n = 12, k = 1, length = nrow(summary_general),labels = c('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'), ordered = F)
summary_general %>%
ggplot(aes(x=month,y=EIR))+
geom_boxplot()+
geom_point(stat='summary', fun.y=mean, color='red')+
stat_summary(fun.y=mean, geom="line")+mytheme
# Create an object with the results
summary_general$PS <- parameter_space
summary_general$exp <- experiment
summary_general$scenario <- scenario
summary_general$run <- run
assign(paste('results_',base_name,sep=''), summary_general)
d <- rbind(results_PS03_S_E01_R1,
# results_PS03_S_E02_R1,
results_PS03_S_E03_R1,
# results_PS03_S_E04_R1)
results_PS03_S_E05_R1)
d <- rbind(results_PS03_N_E00_R1,results_PS03_N_E01_R1,results_PS03_N_E02_R1)
time_range
# mintime=d %>% group_by(exp) %>% summarise(m=max(time)) %>% summarise(min(m))
# mintime=mintime[1,1]
# pdf('seasonal_comparison.pdf',16,10)
time_range <- c(0,14400)
d %>%
select(-year, -month, -n_infected) %>%
filter(time>time_range[1]&time<time_range[2]) %>%
gather(variable, value, -time, -exp, -PS, -scenario, -run) %>%
ggplot(aes(x=time, y=value, color=exp, group=exp))+
geom_line()+
# geom_vline(xintercept = c(21600,21960,22320,22680,23040,23400))+
scale_x_continuous(breaks=pretty(x=subset(d, time>time_range[1]&time<time_range[2])$time,n=5))+
facet_wrap(~variable, scales = 'free')+mytheme
# mintime=d %>% group_by(exp) %>% summarise(m=max(time)) %>% summarise(min(m))
# mintime=mintime[1,1]
# pdf('seasonal_comparison.pdf',16,10)
time_range <- c(10800,14400)
d %>%
select(-year, -month, -n_infected) %>%
filter(time>time_range[1]&time<time_range[2]) %>%
gather(variable, value, -time, -exp, -PS, -scenario, -run) %>%
ggplot(aes(x=time, y=value, color=exp, group=exp))+
geom_line()+
# geom_vline(xintercept = c(21600,21960,22320,22680,23040,23400))+
scale_x_continuous(breaks=pretty(x=subset(d, time>time_range[1]&time<time_range[2])$time,n=5))+
facet_wrap(~variable, scales = 'free')+mytheme
parameter_space
experiment='01'
sqlite_files <- list.files(path = '~/Documents/malaria_interventions_sqlite', pattern=paste('PS',parameter_space,'_S_E',experiment,'_R',sep=''), full.names = T)
sqlite_files <- sqlite_files[str_detect(sqlite_files,'\\.sqlite')] # only sqlite files
sqlite_files <- sqlite_files[!str_detect(sqlite_files,'_CP')] # no checkpoint files
sqlite_files
sqlite_files
f=sqlite_files[1]
db <- dbConnect(SQLite(), dbname = f)
sampled_duration <- dbGetQuery(db, 'SELECT duration, infection_id FROM sampled_duration')
sampled_duration
sampled_duration %>% group_by(infection_id) %>% summarise(meanDuration=mean(duration))
numObservations <- table(sampled_duration$infection_id)
numObservations
numObservations
names(which(numObservations>1))
observations_to_include <- names(which(numObservations>1))
observations_to_include
sampled_duration %>%
filter(infection_id %in% observations_to_include) %>%
group_by(infection_id) %>% summarise(meanDuration=mean(duration))
x=sampled_duration %>%
filter(infection_id %in% observations_to_include) %>%
group_by(infection_id) %>% summarise(meanDuration=mean(duration))
tail(x)
data_to_fit <- sampled_duration %>%
filter(infection_id %in% observations_to_include) %>%
group_by(infection_id) %>% summarise(meanDuration=mean(duration))
y <- data_to_fit$meanDuration-14
data_to_fit
min(data_to_fit$meanDuration)
duration_data <- map(sqlite_files,
function(f){
db <- dbConnect(SQLite(), dbname = f)
sampled_duration <- dbGetQuery(db, 'SELECT duration, infection_id FROM sampled_duration')
return(sampled_duration)
}) %>% bind_rows()
duration_data
f
numObservations <- table(duration_data$infection_id)
observations_to_include <- names(which(numObservations>1))
observations_to_include
duration_data %<>%
filter(infection_id %in% observations_to_include) %>%
group_by(infection_id) %>% summarise(meanDuration=mean(duration))
x <- duration_data$infection_id
y <- duration_data$meanDuration-14
setwd("~/Documents/malaria_interventions")
sqlite_files <- list.files(path = '~/Documents/malaria_interventions_sqlite', pattern=paste('PS',parameter_space,'_S_E',experiment,'_R',sep=''), full.names = T)
sqlite_files <- sqlite_files[str_detect(sqlite_files,'\\.sqlite')] # only sqlite files
sqlite_files <- sqlite_files[!str_detect(sqlite_files,'_CP')] # no checkpoint files
sqlite_files
duration_data <- map(sqlite_files,
function(f){
db <- dbConnect(SQLite(), dbname = f)
sampled_duration <- dbGetQuery(db, 'SELECT duration, infection_id FROM sampled_duration')
return(sampled_duration)
}) %>% bind_rows()
numObservations <- table(duration_data$infection_id)
observations_to_include <- names(which(numObservations>1))
duration_data %<>%
filter(infection_id %in% observations_to_include) %>%
group_by(infection_id) %>% summarise(meanDuration=mean(duration))
x <- duration_data$infection_id
y <- duration_data$meanDuration-14
# Fit function using python code
pyFile <- readLines('generalized_immunity_fitting.py')
pyFile
x.fit <- 0:max(x)
y.fit <- ((b*exp(-c*x.fit))/(d*x.fit+1)^d)+a
plot(x,y)
a=0.01
b=50
c=0.0017
d=0.8
x.fit <- 0:max(x)
y.fit <- ((b*exp(-c*x.fit))/(d*x.fit+1)^d)+a
plot(x.fit,y.fit)
fit <- nls(formula = y~((b*exp(-c*x.fit))/(d*x.fit+1)^d)+a, start = list(a=0.01,
b=50,
c=0.0017,
d=0.8))
fit <- nls(formula = y~((b*exp(-c*x))/(d*x+1)^d)+a, start = list(a=0.01,
b=50,
c=0.0017,
d=0.8))
fit <- nls(formula = y~((b*exp(-c*x))/(d*x+1)^d)+a, start = list(a=0.01,b=50,c=0.0017,d=0.8))
x
y
