experiment <- 'test_01'
mathematica_file <- 'mosquito_population_seasonality.csv' # This file contains the number of adult mosquitos for the particular experiment
param_data[param_data$param=='SAMPLE_DB_FILENAME',] <- set_parameter(param_data, 'SAMPLE_DB_FILENAME', paste('\'\"',experiment,'.sqlite\"\'',sep=''))
param_data[param_data$param=='BITING_RATE_MEAN',] <- set_parameter(param_data, 'BITING_RATE_MEAN', '[0.0002]')
biting_rate_mathematica <- read_csv(mathematica_file, col_names = c('day','num_mosquitos'))
biting_rate_distribution <- biting_rate_mathematica$num_mosquitos
param_data[param_data$param=='DAILY_BITING_RATE_DISTRIBUTION',] <- set_parameter(param_data, 'DAILY_BITING_RATE_DISTRIBUTION', paste('[',paste(biting_rate_distribution, collapse=','),']',sep=''))
# Write to a new paramter file --------------------------------------------
output_file=paste(experiment,'py',sep = '.')
output_file
library(tidyverse)
setwd('~/Documents/malaria_interventions')
set_parameter <- function(param_data, parameter, value){
param_data$value[param_data$param==parameter] <- value
return(subset(param_data, param==parameter))
}
# Get reference parameter file --------------------------------------------
reference <- readLines('parameter_file_ref.py')
lines <- 1:length(reference)
parameters <- map(lines, function(l){
tmp <- str_sub(reference[l], 1, str_locate(reference[l], '=')[1]-1)
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_values <- map(lines, function(l){
tmp <- str_trim(str_sub(reference[l], str_locate(reference[l], '=')[1]+1, 1000), side = 'both')
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_data <- data.frame(param=str_trim(parameters), value=param_values, stringsAsFactors = F)
experiment <- 'test_06'
mathematica_file <- 'mosquito_population_seasonality.csv' # This file contains the number of adult mosquitos for the particular experiment
param_data[param_data$param=='SAMPLE_DB_FILENAME',] <- set_parameter(param_data, 'SAMPLE_DB_FILENAME', paste('\'\"',experiment,'.sqlite\"\'',sep=''))
param_data[param_data$param=='BITING_RATE_MEAN',] <- set_parameter(param_data, 'BITING_RATE_MEAN', '[0.0001]')
biting_rate_mathematica <- read_csv(mathematica_file, col_names = c('day','num_mosquitos'))
biting_rate_distribution <- biting_rate_mathematica$num_mosquitos
param_data[param_data$param=='DAILY_BITING_RATE_DISTRIBUTION',] <- set_parameter(param_data, 'DAILY_BITING_RATE_DISTRIBUTION', paste('[',paste(biting_rate_distribution, collapse=','),']',sep=''))
# Write to a new paramter file --------------------------------------------
output_file=paste(experiment,'py',sep = '.')
param_data$output <- paste(param_data$param,param_data$value,sep='=')
write_lines(param_data$output, output_file)
seasonality <- read_csv('mosquito_population_seasonality.csv', col_names = c('day','num_mosquitos'))
irs <- read_csv('mosquito_population_IRS.csv', col_names = c('day','num_mosquitos'))
seasonality$grp <- 'S'
irs$grp <- 'I'
x <- rbind(seasonality,irs)
head(x)
x %>% ggplot(aes(day, num_mosquitos, color=grp))+geom_line()
# Set parameters ----------------------------------------------------------
experiment <- 'test_07'
mathematica_file <- 'mosquito_population_IRS.csv' # This file contains the number of adult mosquitos for the particular experiment
# Get reference parameter file --------------------------------------------
reference <- readLines('parameter_file_ref.py')
lines <- 1:length(reference)
parameters <- map(lines, function(l){
tmp <- str_sub(reference[l], 1, str_locate(reference[l], '=')[1]-1)
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_values <- map(lines, function(l){
tmp <- str_trim(str_sub(reference[l], str_locate(reference[l], '=')[1]+1, 1000), side = 'both')
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_data <- data.frame(param=str_trim(parameters), value=param_values, stringsAsFactors = F)
# Set parameters ----------------------------------------------------------
experiment <- 'test_07'
mathematica_file <- 'mosquito_population_IRS.csv' # This file contains the number of adult mosquitos for the particular experiment
param_data[param_data$param=='SAMPLE_DB_FILENAME',] <- set_parameter(param_data, 'SAMPLE_DB_FILENAME', paste('\'\"',experiment,'.sqlite\"\'',sep=''))
param_data[param_data$param=='BITING_RATE_MEAN',] <- set_parameter(param_data, 'BITING_RATE_MEAN', '[0.0001]')
biting_rate_mathematica <- read_csv(mathematica_file, col_names = c('day','num_mosquitos'))
biting_rate_distribution <- biting_rate_mathematica$num_mosquitos
param_data[param_data$param=='DAILY_BITING_RATE_DISTRIBUTION',] <- set_parameter(param_data, 'DAILY_BITING_RATE_DISTRIBUTION', paste('[',paste(biting_rate_distribution, collapse=','),']',sep=''))
# Write to a new paramter file --------------------------------------------
output_file=paste(experiment,'py',sep = '.')
param_data$output <- paste(param_data$param,param_data$value,sep='=')
write_lines(param_data$output, output_file)
# Write Midway job file ---------------------------------------------------
job_ref <- readLines('job_file_ref.sbatch')
job_ref
# Write Midway job file ---------------------------------------------------
job_lines <- readLines('job_file_ref.sbatch')
# Write Midway job file ---------------------------------------------------
select_if_null <- function(x, null_option, non_null_option){
if (is.null(x)){
value <- null_option
} else {
value <- non_null_option
}
return(value)
}
wall_time
experiment
SLURM_ARRAY_RANGE <- '1-2'
paste("exp='",experiment,"'",sep='')
output_file=paste(experiment,'sbatch',sep = '.')
job_lines <- readLines('job_file_ref.sbatch')
wall_time <- '20:00:00'
SLURM_ARRAY_RANGE <- '1-2'
memory <- '16000'
job_lines[2] <- paste('#SBATCH --job-name=',experiment,sep='')
job_lines[3] <- paste('#SBATCH --time=',wall_time,sep='')
job_lines[4] <- paste('#SBATCH --output=slurm_output/',experiment,'_%A_%a.out',sep='')
job_lines[5] <- paste('#SBATCH --error=slurm_output/',experiment,'_%A_%a.err',sep='')
job_lines[6] <- paste('#SBATCH --array=',SLURM_ARRAY_RANGE,sep='')
job_lines[9] <- paste('#SBATCH --mem-per-cpu=',memory,sep='')
job_lines[20] <- paste("exp='",experiment,"'",sep='')
write_lines(job_lines, output_file)
# plots -------------------------------------------------------------------
seasonality <- read_csv('mosquito_population_seasonality.csv', col_names = c('day','num_mosquitos'))
seasonality$grp <- 'S'
irs_09 <- read_csv('mosquito_population_IRS.csv', col_names = c('day','num_mosquitos'))
irs$grp <- 'I_09'
irs$grp <- 'I_90'
irs_90 <- read_csv('mosquito_population_IRS.csv', col_names = c('day','num_mosquitos'))
irs_90$grp <- 'I_90'
irs_95 <- read_csv('mosquito_population_IRS_095.csv', col_names = c('day','num_mosquitos'))
irs_95$grp <- 'I_95'
x <- rbind(seasonality,irs_90,irs_95)
x %>% ggplot(aes(day, num_mosquitos, color=grp))+geom_line()
irs_100 <- read_csv('mosquito_population_IRS_100.csv', col_names = c('day','num_mosquitos'))
irs_100$grp <- 'I_100'
x <- rbind(seasonality,irs_90,irs_95,irs_100)
x %>% ggplot(aes(day, num_mosquitos, color=grp))+geom_line()
irs01 <- read_csv('mosquito_population_IRS01.csv', col_names = c('day','num_mosquitos'))
irs01$grp <- 'IRS01'
seasonality <- read_csv('mosquito_population_seasonality.csv', col_names = c('day','num_mosquitos'))
seasonality$grp <- 'S'
irs01 <- read_csv('mosquito_population_IRS01.csv', col_names = c('day','num_mosquitos'))
irs01$grp <- 'IRS01'
irs02 <- read_csv('mosquito_population_IRS02.csv', col_names = c('day','num_mosquitos'))
irs02$grp <- 'IRS02'
x <- rbind(seasonality,irs01,irs02)
x %>% ggplot(aes(day, num_mosquitos, color=grp))+geom_line()
library(tidyverse)
setwd('~/Documents/malaria_interventions')
set_parameter <- function(param_data, parameter, value){
param_data$value[param_data$param==parameter] <- value
return(subset(param_data, param==parameter))
}
# Get reference parameter file --------------------------------------------
reference <- readLines('parameter_file_ref.py')
lines <- 1:length(reference)
parameters <- map(lines, function(l){
tmp <- str_sub(reference[l], 1, str_locate(reference[l], '=')[1]-1)
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_values <- map(lines, function(l){
tmp <- str_trim(str_sub(reference[l], str_locate(reference[l], '=')[1]+1, 1000), side = 'both')
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_data <- data.frame(param=str_trim(parameters), value=param_values, stringsAsFactors = F)
experiment <- 'test_07'
mathematica_file <- 'mosquito_population_seasonality.csv' # This file contains the number of adult mosquitos for the particular experiment
param_data[param_data$param=='SAMPLE_DB_FILENAME',] <- set_parameter(param_data, 'SAMPLE_DB_FILENAME', paste('\'\"',experiment,'.sqlite\"\'',sep=''))
param_data[param_data$param=='BITING_RATE_MEAN',] <- set_parameter(param_data, 'BITING_RATE_MEAN', '[0.00005]')
biting_rate_mathematica <- read_csv(mathematica_file, col_names = c('day','num_mosquitos'))
biting_rate_distribution <- biting_rate_mathematica$num_mosquitos
param_data[param_data$param=='DAILY_BITING_RATE_DISTRIBUTION',] <- set_parameter(param_data, 'DAILY_BITING_RATE_DISTRIBUTION', paste('[',paste(biting_rate_distribution, collapse=','),']',sep=''))
# Write to a new paramter file --------------------------------------------
output_file=paste(experiment,'py',sep = '.')
param_data$output <- paste(param_data$param,param_data$value,sep='=')
write_lines(param_data$output, output_file)
# Write Midway job file ---------------------------------------------------
output_file=paste(experiment,'sbatch',sep = '.')
job_lines <- readLines('job_file_ref.sbatch')
wall_time <- '20:00:00'
SLURM_ARRAY_RANGE <- '1'
memory <- '16000'
job_lines[2] <- paste('#SBATCH --job-name=',experiment,sep='')
job_lines[3] <- paste('#SBATCH --time=',wall_time,sep='')
job_lines[4] <- paste('#SBATCH --output=slurm_output/',experiment,'_%A_%a.out',sep='')
job_lines[5] <- paste('#SBATCH --error=slurm_output/',experiment,'_%A_%a.err',sep='')
job_lines[6] <- paste('#SBATCH --array=',SLURM_ARRAY_RANGE,sep='')
job_lines[9] <- paste('#SBATCH --mem-per-cpu=',memory,sep='')
job_lines[20] <- paste("exp='",experiment,"'",sep='')
write_lines(job_lines, output_file)
# Get reference parameter file --------------------------------------------
reference <- readLines('parameter_file_ref.py')
lines <- 1:length(reference)
parameters <- map(lines, function(l){
tmp <- str_sub(reference[l], 1, str_locate(reference[l], '=')[1]-1)
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_values <- map(lines, function(l){
tmp <- str_trim(str_sub(reference[l], str_locate(reference[l], '=')[1]+1, 1000), side = 'both')
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_data <- data.frame(param=str_trim(parameters), value=param_values, stringsAsFactors = F)
# Set parameters ----------------------------------------------------------
experiment <- 'test_08'
mathematica_file <- 'mosquito_population_IRS01.csv' # This file contains the number of adult mosquitos for the particular experiment
param_data[param_data$param=='SAMPLE_DB_FILENAME',] <- set_parameter(param_data, 'SAMPLE_DB_FILENAME', paste('\'\"',experiment,'.sqlite\"\'',sep=''))
param_data[param_data$param=='BITING_RATE_MEAN',] <- set_parameter(param_data, 'BITING_RATE_MEAN', '[0.00005]')
biting_rate_mathematica <- read_csv(mathematica_file, col_names = c('day','num_mosquitos'))
biting_rate_distribution <- biting_rate_mathematica$num_mosquitos
param_data[param_data$param=='DAILY_BITING_RATE_DISTRIBUTION',] <- set_parameter(param_data, 'DAILY_BITING_RATE_DISTRIBUTION', paste('[',paste(biting_rate_distribution, collapse=','),']',sep=''))
# Write to a new paramter file --------------------------------------------
output_file=paste(experiment,'py',sep = '.')
param_data$output <- paste(param_data$param,param_data$value,sep='=')
write_lines(param_data$output, output_file)
# Write Midway job file ---------------------------------------------------
output_file=paste(experiment,'sbatch',sep = '.')
job_lines <- readLines('job_file_ref.sbatch')
wall_time <- '20:00:00'
SLURM_ARRAY_RANGE <- '1'
memory <- '16000'
job_lines[2] <- paste('#SBATCH --job-name=',experiment,sep='')
job_lines[3] <- paste('#SBATCH --time=',wall_time,sep='')
job_lines[4] <- paste('#SBATCH --output=slurm_output/',experiment,'_%A_%a.out',sep='')
job_lines[5] <- paste('#SBATCH --error=slurm_output/',experiment,'_%A_%a.err',sep='')
job_lines[6] <- paste('#SBATCH --array=',SLURM_ARRAY_RANGE,sep='')
job_lines[9] <- paste('#SBATCH --mem-per-cpu=',memory,sep='')
job_lines[20] <- paste("exp='",experiment,"'",sep='')
write_lines(job_lines, output_file)
# Get reference parameter file --------------------------------------------
reference <- readLines('parameter_file_ref.py')
lines <- 1:length(reference)
parameters <- map(lines, function(l){
tmp <- str_sub(reference[l], 1, str_locate(reference[l], '=')[1]-1)
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_values <- map(lines, function(l){
tmp <- str_trim(str_sub(reference[l], str_locate(reference[l], '=')[1]+1, 1000), side = 'both')
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_data <- data.frame(param=str_trim(parameters), value=param_values, stringsAsFactors = F)
# Set parameters ----------------------------------------------------------
experiment <- 'test_09'
mathematica_file <- 'mosquito_population_IRS02.csv' # This file contains the number of adult mosquitos for the particular experiment
param_data[param_data$param=='SAMPLE_DB_FILENAME',] <- set_parameter(param_data, 'SAMPLE_DB_FILENAME', paste('\'\"',experiment,'.sqlite\"\'',sep=''))
param_data[param_data$param=='BITING_RATE_MEAN',] <- set_parameter(param_data, 'BITING_RATE_MEAN', '[0.00005]')
biting_rate_mathematica <- read_csv(mathematica_file, col_names = c('day','num_mosquitos'))
biting_rate_distribution <- biting_rate_mathematica$num_mosquitos
param_data[param_data$param=='DAILY_BITING_RATE_DISTRIBUTION',] <- set_parameter(param_data, 'DAILY_BITING_RATE_DISTRIBUTION', paste('[',paste(biting_rate_distribution, collapse=','),']',sep=''))
# Write to a new paramter file --------------------------------------------
output_file=paste(experiment,'py',sep = '.')
param_data$output <- paste(param_data$param,param_data$value,sep='=')
write_lines(param_data$output, output_file)
# Write Midway job file ---------------------------------------------------
output_file=paste(experiment,'sbatch',sep = '.')
job_lines <- readLines('job_file_ref.sbatch')
wall_time <- '20:00:00'
SLURM_ARRAY_RANGE <- '1'
memory <- '16000'
job_lines[2] <- paste('#SBATCH --job-name=',experiment,sep='')
job_lines[3] <- paste('#SBATCH --time=',wall_time,sep='')
job_lines[4] <- paste('#SBATCH --output=slurm_output/',experiment,'_%A_%a.out',sep='')
job_lines[5] <- paste('#SBATCH --error=slurm_output/',experiment,'_%A_%a.err',sep='')
job_lines[6] <- paste('#SBATCH --array=',SLURM_ARRAY_RANGE,sep='')
job_lines[9] <- paste('#SBATCH --mem-per-cpu=',memory,sep='')
job_lines[20] <- paste("exp='",experiment,"'",sep='')
write_lines(job_lines, output_file)
library(tidyverse)
setwd('~/Documents/malaria_interventions')
set_parameter <- function(param_data, parameter, value){
param_data$value[param_data$param==parameter] <- value
return(subset(param_data, param==parameter))
}
# Get reference parameter file --------------------------------------------
reference <- readLines('parameter_file_ref.py')
lines <- 1:length(reference)
parameters <- map(lines, function(l){
tmp <- str_sub(reference[l], 1, str_locate(reference[l], '=')[1]-1)
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_values <- map(lines, function(l){
tmp <- str_trim(str_sub(reference[l], str_locate(reference[l], '=')[1]+1, 1000), side = 'both')
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_data <- data.frame(param=str_trim(parameters), value=param_values, stringsAsFactors = F)
# Define parameters to set ------------------------------------------------
experiment <- 'test_08'
BITING_RATE_MEAN <- 1
BITING_RATE_MEAN <- 0.00006666666667
# The biting rate distribution for seasonality and/or IRS is generated in
# Mathematica and exported to a file. This distribution consists of the number
# of adult mosquitos. This is done per experiment.
mathematica_file <- 'mosquito_population_seasonality.csv'
biting_rate_mathematica <- read_csv(mathematica_file, col_names = c('day','num_mosquitos'))
DAILY_BITING_RATE_DISTRIBUTION <- biting_rate_mathematica$num_mosquitos
# Set parameters ----------------------------------------------------------
param_data[param_data$param=='SAMPLE_DB_FILENAME',] <- set_parameter(param_data, 'SAMPLE_DB_FILENAME', paste('\'\"',experiment,'.sqlite\"\'',sep=''))
param_data[param_data$param=='BITING_RATE_MEAN',] <- set_parameter(param_data, 'BITING_RATE_MEAN', paste('[',BITING_RATE_MEAN,']',sep=''))
param_data[param_data$param=='DAILY_BITING_RATE_DISTRIBUTION',] <- set_parameter(param_data, 'DAILY_BITING_RATE_DISTRIBUTION', paste('[',paste(DAILY_BITING_RATE_DISTRIBUTION, collapse=','),']',sep=''))
# Write to a new paramter file --------------------------------------------
output_file=paste(experiment,'py',sep = '.')
param_data$output <- paste(param_data$param,param_data$value,sep='=')
write_lines(param_data$output, output_file)
# Write Midway job file ---------------------------------------------------
output_file=paste(experiment,'sbatch',sep = '.')
job_lines <- readLines('job_file_ref.sbatch')
wall_time <- '10:00:00'
SLURM_ARRAY_RANGE <- '1'
memory <- '4000'
job_lines[2] <- paste('#SBATCH --job-name=',experiment,sep='')
job_lines[3] <- paste('#SBATCH --time=',wall_time,sep='')
job_lines[4] <- paste('#SBATCH --output=slurm_output/',experiment,'_%A_%a.out',sep='')
job_lines[5] <- paste('#SBATCH --error=slurm_output/',experiment,'_%A_%a.err',sep='')
job_lines[6] <- paste('#SBATCH --array=',SLURM_ARRAY_RANGE,sep='')
job_lines[9] <- paste('#SBATCH --mem-per-cpu=',memory,sep='')
job_lines[20] <- paste("exp='",experiment,"'",sep='')
write_lines(job_lines, output_file)
# Get reference parameter file --------------------------------------------
reference <- readLines('parameter_file_ref.py')
lines <- 1:length(reference)
parameters <- map(lines, function(l){
tmp <- str_sub(reference[l], 1, str_locate(reference[l], '=')[1]-1)
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_values <- map(lines, function(l){
tmp <- str_trim(str_sub(reference[l], str_locate(reference[l], '=')[1]+1, 1000), side = 'both')
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_data <- data.frame(param=str_trim(parameters), value=param_values, stringsAsFactors = F)
# Define parameters to set ------------------------------------------------
experiment <- 'CP_test'
BITING_RATE_MEAN <- 1
View(param_data)
set_parameter <- function(param_data, parameter, value){
param_data$value[param_data$param==parameter] <- value
return(subset(param_data, param==parameter))
}
# Get reference parameter file --------------------------------------------
reference <- readLines('parameter_file_ref.py')
lines <- 1:length(reference)
parameters <- map(lines, function(l){
tmp <- str_sub(reference[l], 1, str_locate(reference[l], '=')[1]-1)
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_values <- map(lines, function(l){
tmp <- str_trim(str_sub(reference[l], str_locate(reference[l], '=')[1]+1, 1000), side = 'both')
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_data <- data.frame(param=str_trim(parameters), value=param_values, stringsAsFactors = F)
# Define parameters to set ------------------------------------------------
experiment <- 'CP_test'
BITING_RATE_MEAN <- 1
# The biting rate distribution for seasonality and/or IRS is generated in
# Mathematica and exported to a file. This distribution consists of the number
# of adult mosquitos. This is done per experiment.
mathematica_file <- 'mosquito_population_seasonality.csv'
biting_rate_mathematica <- read_csv(mathematica_file, col_names = c('day','num_mosquitos'))
DAILY_BITING_RATE_DISTRIBUTION <- biting_rate_mathematica$num_mosquitos
DAILY_BITING_RATE_DISTRIBUTION <- paste(rep(0.05,360),collapse=',') # This is to set a fixed biting rate. Mostly for testing.
# Set parameters ----------------------------------------------------------
param_data[param_data$param=='N_GENES_INITIAL',] <- set_parameter(param_data, 'N_GENES_INITIAL', 12000)
# Set parameters ----------------------------------------------------------
param_data[param_data$param=='N_GENES_INITIAL',] <- set_parameter(param_data, 'N_GENES_INITIAL', 1200)
# Define parameters to set ------------------------------------------------
experiment <- 'CP_test'
BITING_RATE_MEAN <- 1
N_GENES_INITIAL <- 120 # The initial gene pool
# Define parameters to set ------------------------------------------------
experiment <- 'CP_test'
BITING_RATE_MEAN <- 0.01
N_GENES_INITIAL <- 1200 # The initial gene pool
# The biting rate distribution for seasonality and/or IRS is generated in
# Mathematica and exported to a file. This distribution consists of the number
# of adult mosquitos. This is done per experiment.
mathematica_file <- 'mosquito_population_seasonality.csv'
biting_rate_mathematica <- read_csv(mathematica_file, col_names = c('day','num_mosquitos'))
DAILY_BITING_RATE_DISTRIBUTION <- biting_rate_mathematica$num_mosquitos
DAILY_BITING_RATE_DISTRIBUTION <- paste(rep(0.01,360),collapse=',') # This is to set a fixed biting rate. Mostly for testing.
BITING_RATE_MEAN <- 1
# Set parameters ----------------------------------------------------------
param_data[param_data$param=='N_GENES_INITIAL',] <- set_parameter(param_data, 'N_GENES_INITIAL', N_GENES_INITIAL)
# Get reference parameter file --------------------------------------------
reference <- readLines('parameter_file_ref.py')
lines <- 1:length(reference)
parameters <- map(lines, function(l){
tmp <- str_sub(reference[l], 1, str_locate(reference[l], '=')[1]-1)
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_values <- map(lines, function(l){
tmp <- str_trim(str_sub(reference[l], str_locate(reference[l], '=')[1]+1, 1000), side = 'both')
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_data <- data.frame(param=str_trim(parameters), value=param_values, stringsAsFactors = F)
# Set parameters ----------------------------------------------------------
param_data[param_data$param=='N_GENES_INITIAL',] <- set_parameter(param_data, 'N_GENES_INITIAL', N_GENES_INITIAL)
param_data[param_data$param=='N_ALLELES_INITIAL',] <- set_parameter(param_data, paste('N_LOCI*[',N_GENES_INITIAL/10,']',sep=''))
N_GENES_INITIAL
N_GENES_INITIAL/10
paste('N_LOCI*[',N_GENES_INITIAL/10,']',sep='')
param_data[param_data$param=='N_ALLELES_INITIAL',] <- set_parameter(param_data, paste('N_LOCI*[',N_GENES_INITIAL/10,']',sep=''))
param_data[param_data$param=='N_ALLELES_INITIAL',] <- set_parameter(param_data, 'N_ALLELES_INITIAL', paste('N_LOCI*[',N_GENES_INITIAL/10,']',sep=''))
param_data[param_data$param=='N_GENES_INITIAL',] <- set_parameter(param_data, 'N_GENES_INITIAL', 120)
# Set parameters ----------------------------------------------------------
param_data[param_data$param=='N_GENES_INITIAL',] <- set_parameter(param_data, 'N_GENES_INITIAL', N_GENES_INITIAL)
param_data[param_data$param=='N_ALLELES_INITIAL',] <- set_parameter(param_data, 'N_ALLELES_INITIAL', paste('N_LOCI*[',N_GENES_INITIAL/10,']',sep=''))
param_data[param_data$param=='SAMPLE_DB_FILENAME',] <- set_parameter(param_data, 'SAMPLE_DB_FILENAME', paste('\'\"',experiment,'.sqlite\"\'',sep=''))
BITING_RATE_MEAN
param_data[param_data$param=='BITING_RATE_MEAN',] <- set_parameter(param_data, 'BITING_RATE_MEAN', paste('[',BITING_RATE_MEAN,']',sep=''))
DAILY_BITING_RATE_DISTRIBUTION
param_data[param_data$param=='DAILY_BITING_RATE_DISTRIBUTION',] <- set_parameter(param_data, 'DAILY_BITING_RATE_DISTRIBUTION', paste('[',paste(DAILY_BITING_RATE_DISTRIBUTION, collapse=','),']',sep=''))
param_data[param_data$param=='SAVE_TO_CHECKPOINT',] <- set_parameter(param_data, 'SAVE_TO_CHECKPOINT', 'True')
# Set parameters ----------------------------------------------------------
# File names
param_data[param_data$param=='SAMPLE_DB_FILENAME',] <- set_parameter(param_data, 'SAMPLE_DB_FILENAME', paste('\'\"',experiment,'.sqlite\"\'',sep=''))
param_data[param_data$param=='SAVE_TO_CHECKPOINT',] <- set_parameter(param_data, 'SAVE_TO_CHECKPOINT', 'True')
param_data[param_data$param=='CHECKPOINT_SAVE_FILENAME',] <- set_parameter(param_data, 'CHECKPOINT_SAVE_FILENAME', paste('\'\"',experiment,'_checkpoint.sqlite\"\'',sep=''))
# Genetic diversity
param_data[param_data$param=='N_GENES_INITIAL',] <- set_parameter(param_data, 'N_GENES_INITIAL', N_GENES_INITIAL)
param_data[param_data$param=='SAMPLE_DB_FILENAME',] <- set_parameter(param_data, 'SAMPLE_DB_FILENAME', paste('\'\"',experiment,'.sqlite\"\'',sep=''))
# Genetic diversity
param_data[param_data$param=='N_GENES_INITIAL',] <- set_parameter(param_data, 'N_GENES_INITIAL', N_GENES_INITIAL)
param_data[param_data$param=='N_ALLELES_INITIAL',] <- set_parameter(param_data, 'N_ALLELES_INITIAL', paste('N_LOCI*[',N_GENES_INITIAL/10,']',sep=''))
# Biting rates
param_data[param_data$param=='BITING_RATE_MEAN',] <- set_parameter(param_data, 'BITING_RATE_MEAN', paste('[',BITING_RATE_MEAN,']',sep=''))
param_data[param_data$param=='DAILY_BITING_RATE_DISTRIBUTION',] <- set_parameter(param_data, 'DAILY_BITING_RATE_DISTRIBUTION', paste('[',paste(DAILY_BITING_RATE_DISTRIBUTION, collapse=','),']',sep=''))
# Timing
param_data[param_data$param=='T_END',] <- set_parameter(param_data, 'T_END', 2880)
param_data[param_data$param=='VERIFICATION_PERIOD',] <- set_parameter(param_data, 'VERIFICATION_PERIOD', 2880)
param_data[param_data$param=='CHECKPOINT_SAVE_PERIOD',] <- set_parameter(param_data, 'CHECKPOINT_SAVE_PERIOD', 2880)
# Checkpoints
param_data[param_data$param=='SAVE_TO_CHECKPOINT',] <- set_parameter(param_data, 'SAVE_TO_CHECKPOINT', 'True')
param_data[param_data$param=='CHECKPOINT_SAVE_FILENAME',] <- set_parameter(param_data, 'CHECKPOINT_SAVE_FILENAME', paste('\'\"',experiment,'_checkpoint.sqlite\"\'',sep=''))
# Write to a new paramter file --------------------------------------------
output_file=paste(experiment,'py',sep = '.')
param_data$output <- paste(param_data$param,param_data$value,sep='=')
write_lines(param_data$output, output_file)
# Write Midway job file ---------------------------------------------------
output_file=paste(experiment,'sbatch',sep = '.')
output_file
# Get reference parameter file --------------------------------------------
reference <- readLines('parameter_file_ref.py')
lines <- 1:length(reference)
parameters <- map(lines, function(l){
tmp <- str_sub(reference[l], 1, str_locate(reference[l], '=')[1]-1)
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_values <- map(lines, function(l){
tmp <- str_trim(str_sub(reference[l], str_locate(reference[l], '=')[1]+1, 1000), side = 'both')
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_data <- data.frame(param=str_trim(parameters), value=param_values, stringsAsFactors = F)
# Define parameters to set ------------------------------------------------
experiment <- 'CPsave_test'
BITING_RATE_MEAN <- 1
N_GENES_INITIAL <- 1200 # The initial gene pool
# The biting rate distribution for seasonality and/or IRS is generated in
# Mathematica and exported to a file. This distribution consists of the number
# of adult mosquitos. This is done per experiment.
mathematica_file <- 'mosquito_population_seasonality.csv'
biting_rate_mathematica <- read_csv(mathematica_file, col_names = c('day','num_mosquitos'))
DAILY_BITING_RATE_DISTRIBUTION <- biting_rate_mathematica$num_mosquitos
DAILY_BITING_RATE_DISTRIBUTION <- paste(rep(0.01,360),collapse=',') # This is to set a fixed biting rate. Mostly for testing.
# Set parameters ----------------------------------------------------------
# File names
param_data[param_data$param=='SAMPLE_DB_FILENAME',] <- set_parameter(param_data, 'SAMPLE_DB_FILENAME', paste('\'\"',experiment,'.sqlite\"\'',sep=''))
# Genetic diversity
param_data[param_data$param=='N_GENES_INITIAL',] <- set_parameter(param_data, 'N_GENES_INITIAL', N_GENES_INITIAL)
param_data[param_data$param=='N_ALLELES_INITIAL',] <- set_parameter(param_data, 'N_ALLELES_INITIAL', paste('N_LOCI*[',N_GENES_INITIAL/10,']',sep=''))
# Biting rates
param_data[param_data$param=='BITING_RATE_MEAN',] <- set_parameter(param_data, 'BITING_RATE_MEAN', paste('[',BITING_RATE_MEAN,']',sep=''))
param_data[param_data$param=='DAILY_BITING_RATE_DISTRIBUTION',] <- set_parameter(param_data, 'DAILY_BITING_RATE_DISTRIBUTION', paste('[',paste(DAILY_BITING_RATE_DISTRIBUTION, collapse=','),']',sep=''))
# Timing
param_data[param_data$param=='T_END',] <- set_parameter(param_data, 'T_END', 2880)
param_data[param_data$param=='VERIFICATION_PERIOD',] <- set_parameter(param_data, 'VERIFICATION_PERIOD', 2880)
param_data[param_data$param=='CHECKPOINT_SAVE_PERIOD',] <- set_parameter(param_data, 'CHECKPOINT_SAVE_PERIOD', 2880)
# Checkpoints
param_data[param_data$param=='SAVE_TO_CHECKPOINT',] <- set_parameter(param_data, 'SAVE_TO_CHECKPOINT', 'True')
param_data[param_data$param=='CHECKPOINT_SAVE_FILENAME',] <- set_parameter(param_data, 'CHECKPOINT_SAVE_FILENAME', paste('\'\"',experiment,'_checkpoint.sqlite\"\'',sep=''))
# Write to a new paramter file --------------------------------------------
output_file=paste(experiment,'py',sep = '.')
param_data$output <- paste(param_data$param,param_data$value,sep='=')
write_lines(param_data$output, output_file)
# Write Midway job file ---------------------------------------------------
output_file=paste(experiment,'sbatch',sep = '.')
job_lines <- readLines('job_file_ref.sbatch')
wall_time <- '01:00:00'
SLURM_ARRAY_RANGE <- '1'
memory <- '4000'
job_lines[2] <- paste('#SBATCH --job-name=',experiment,sep='')
job_lines[3] <- paste('#SBATCH --time=',wall_time,sep='')
job_lines[4] <- paste('#SBATCH --output=slurm_output/',experiment,'_%A_%a.out',sep='')
job_lines[5] <- paste('#SBATCH --error=slurm_output/',experiment,'_%A_%a.err',sep='')
job_lines[6] <- paste('#SBATCH --array=',SLURM_ARRAY_RANGE,sep='')
job_lines[9] <- paste('#SBATCH --mem-per-cpu=',memory,sep='')
job_lines[20] <- paste("exp='",experiment,"'",sep='')
write_lines(job_lines, output_file)
library(sqldf)
library(tidyverse)
# Functions ---------------------------------------------------------------
mytheme <- theme_bw() + theme(
legend.title  = element_text(colour = "black", size=17),
legend.position = "none",
#	legend.direction = "horizontal",
legend.key = element_blank(),
legend.text  = element_text(colour = "black", size=17),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_text(color='black', family="Helvetica", size=19),
strip.text.x = element_text(family = "Helvetica", size = 10),
strip.text.y = element_text(family = "Helvetica", size = 10),
panel.border = element_rect(colour = "black", size=1.3),
axis.ticks = element_line(size = 1.3),
strip.background = element_rect( fill = "transparent", size = 1.3, colour = "black"  ),
strip.text = element_text(size = 19)
)
chunk2 <- function(x,n) split(x, cut(seq_along(x), n, labels = FALSE))
# This function extracts the biting rates from the parameter file, which are in
# daily resolution and returns a vector of the averaged biting rates for a given
# period. (e.g. 30 would be biting rates averaged over a month and 1 will return
# the daily biting rates).
get_biting_rate <- function(parameter_file, sampling_period=30){
x <- readLines(parameter_file)
y <- x[grep('BITING_RATE_MEAN',x)[1]]
BITING_RATE_MEAN <- parse_number(y)
y <- x[grep('DAILY_BITING_RATE_DISTRIBUTION',x)[1]]
DAILY_BITING_RATE_DISTRIBUTION <- eval(parse(text=paste('c(',(str_sub(y, str_locate(y, '\\[(.*?)\\]')[1]+1, str_locate(y, '\\[(.*?)\\]')[2]-1)),')',sep='')))
BITING_RATE <- BITING_RATE_MEAN*DAILY_BITING_RATE_DISTRIBUTION
BITING_RATE <- chunk2(BITING_RATE, 360/sampling_period)
sapply(BITING_RATE, mean)
}
