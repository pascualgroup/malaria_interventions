}
M <- M / sqrt(S)
e <- eigen(M, only.values = TRUE)$values
data_frame(x = Re(e), y = Im(e), S = S, rho = rho)
}) %>% bind_rows()
data_eigenvalues_cor %>% ggplot(aes(x = x, y = y, colour = factor(rho))) + geom_point(size = 2.5, alpha = 0.5) + mytheme + xlab(expression(Re(lambda))) + ylab(expression(Im(lambda))) + scale_colour_discrete(name = expression(rho))  + coord_fixed() + scale_x_continuous(breaks = c(1 + rho_seq, -1 - rho_seq)) + scale_y_continuous(breaks = c(1 - rho_seq, -1 + rho_seq))
S <- 100
rho_seq <- c(-0.75, 0, 0.75)
generate_eigenvalues_cor <- function(rho){
M <- matrix(0, S, S)
Sigma <- matrix(c(1, rho, rho, 1), nrow = 2)
M <- diag(rnorm(S))
for(i in seq(1, S - 1)) {
for (j in seq(i + 1, S)){
Z <- mvrnorm(1, c(0,0), Sigma)
M[i,j] <- Z[1]
M[j,i] <- Z[2]
}
}
M <- M / sqrt(S)
e <- eigen(M, only.values = TRUE)$values
data_frame(x = Re(e), y = Im(e), S = S, rho = rho)
}
data_eigenvalues_cor <- map(rho_seq, generate_eigenvalues_cor) %>%bind_rows()
data_eigenvalues_cor %>% ggplot(aes(x = x, y = y, colour = factor(rho))) + geom_point(size = 2.5, alpha = 0.5) + mytheme + xlab(expression(Re(lambda))) + ylab(expression(Im(lambda))) + scale_colour_discrete(name = expression(rho))  + coord_fixed() + scale_x_continuous(breaks = c(1 + rho_seq, -1 - rho_seq)) + scale_y_continuous(breaks = c(1 - rho_seq, -1 + rho_seq))
mvrnorm(1, c(0,0), Sigma)
Sigma <- matrix(c(1, rho, rho, 1), nrow = 2)
rho=0.75
Sigma <- matrix(c(1, rho, rho, 1), nrow = 2)
Sigma
mvrnorm(1, c(0,0), Sigma)
mvrnorm(1, c(0,0), Sigma)
mvrnorm(1, c(0,0), Sigma)
S <- 100
C <- 0.4
S <- 100
C <- 0.2
alpha <- 1/4
sigma <- 1
mu_seq <- c(-1/4, 0, 1/4)
n <- length(mu_seq)
rho_seq <- c(-1/4, -3/4, -0.5)
Q_seq <- c(-0.5, 0, 0.35)
K <- matrix(0, S, S) ## adjacency matrix
M <- matrix(0, S, S) ## Community matrix
m <- S * alpha  ## size of the top module
data_modules <- map(Q_seq, function(Q){
Cw <- C * (1 + Q/(alpha^2 + (1-alpha)^2))
Cb <- C * (1 - Q/(2 * alpha * (1-alpha)))
AB <- matrix(runif(m * (S-m)) < Cb, m , S - m)
K[1:m, 1:m] <- matrix(runif(m^2) < Cw, m, m)
K[(m + 1):S, (m+1):S] <- matrix(runif((S - m)^2) < Cw, S - m, S - m)
K[1:m, (m+1):S] <- AB
K[(m+1):S, 1:m] <- t(AB)
map(1:n, function(i){
mu <- mu_seq[i]
rho <- rho_seq[i]
Sigma <- matrix(c(sigma^2, rho * sigma^2, rho * sigma^2, sigma^2), nrow = 2)
for(i in seq(1, S - 1)) {
for (j in seq(i + 1, S)){
if (K[i,j] > 0){
Z <- mvrnorm(1, c(mu, mu), Sigma)
M[i,j] <- Z[1]
M[j,i] <- Z[2]
}
}
}
e <- eigen(M, only.values = TRUE)$values
data_frame(x = Re(e), y = Im(e), S = S, mu = mu, rho = rho, Q = Q)
}) %>% bind_rows()
}) %>% bind_rows()
data_modules %>% ggplot(aes(x = x, y = y, colour = factor(mu))) +
geom_point(size = 2.5, alpha = 0.5) +
mytheme + xlab(expression(Re(lambda))) + ylab(expression(Im(lambda))) + scale_colour_discrete(name = expression(mu))  + coord_fixed() + facet_grid(Q ~ mu, labeller = label_bquote(cols = paste(mu," = ",.(mu), collapse = ""), rows = paste(Q," = ",.(Q), collapse = "")))
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
S <- 50
S <- 50
mu_seq <- c(-0.1, 0.01, 0.1)
outliers <- data_frame(x = (S - 1) * mu_seq, y = 0, mu = mu_seq)
data_eigenvalues_mean <- map(mu_seq, function(mu){
M <- matrix(runif(S^2, min = -sqrt(3), max = sqrt(3)), S, S)
M <- M + mu - diag(S) * mu
e <- eigen(M, only.values = TRUE)$values
data_frame(x = Re(e), y = Im(e), S = S, mu = mu)
}) %>% bind_rows()
data_eigenvalues_mean %>% ggplot(aes(x = x, y = y)) + geom_point(size = 1.3, alpha = 0.5) + mytheme + xlab(expression(Re(lambda))) + ylab(expression(Im(lambda))) + facet_grid(mu ~.) + coord_fixed() + geom_point(data = outliers, size = 2, colour = "red")
data_eigenvalues_mean %>% ggplot(aes(x = x, y = y)) + geom_point(size = 1.3, alpha = 0.5) + mytheme + xlab(expression(Re(lambda))) + ylab(expression(Im(lambda))) + facet_grid(mu ~.) + coord_fixed() + geom_point(data = outliers, size = 2, colour = "red")
S <- 500
mu_seq <- c(-0.1, 0.01, 0.1)
outliers <- data_frame(x = (S - 1) * mu_seq, y = 0, mu = mu_seq)
data_eigenvalues_mean <- map(mu_seq, function(mu){
M <- matrix(runif(S^2, min = -sqrt(3), max = sqrt(3)), S, S)
M <- M + mu - diag(S) * mu
e <- eigen(M, only.values = TRUE)$values
data_frame(x = Re(e), y = Im(e), S = S, mu = mu)
}) %>% bind_rows()
data_eigenvalues_mean %>% ggplot(aes(x = x, y = y)) + geom_point(size = 1.3, alpha = 0.5) + mytheme + xlab(expression(Re(lambda))) + ylab(expression(Im(lambda))) + facet_grid(mu ~.) + coord_fixed() + geom_point(data = outliers, size = 2, colour = "red")
S <- 50
rho_seq <- c(-0.75, 0, 0.75)
generate_eigenvalues_cor <- function(rho){
M <- matrix(0, S, S)
Sigma <- matrix(c(1, rho, rho, 1), nrow = 2)
M <- diag(rnorm(S))
for(i in seq(1, S - 1)) {
for (j in seq(i + 1, S)){
Z <- mvrnorm(1, c(0,0), Sigma)
M[i,j] <- Z[1]
M[j,i] <- Z[2]
}
}
M <- M / sqrt(S)
e <- eigen(M, only.values = TRUE)$values
data_frame(x = Re(e), y = Im(e), S = S, rho = rho)
}
data_eigenvalues_cor <- map(rho_seq, generate_eigenvalues_cor) %>%bind_rows()
data_eigenvalues_cor %>% ggplot(aes(x = x, y = y, colour = factor(rho))) + geom_point(size = 2.5, alpha = 0.5) + mytheme + xlab(expression(Re(lambda))) + ylab(expression(Im(lambda))) + scale_colour_discrete(name = expression(rho))  + coord_fixed() + scale_x_continuous(breaks = c(1 + rho_seq, -1 - rho_seq)) + scale_y_continuous(breaks = c(1 - rho_seq, -1 + rho_seq))
S <- 100
C <- 0.2
alpha <- 1/4
sigma <- 1
mu_seq <- c(-1/4, 0, 1/4)
n <- length(mu_seq)
rho_seq <- c(-1/4, -3/4, -0.5)
Q_seq <- c(-0.5, 0, 0.35) # This is the modularity.
K <- matrix(0, S, S) ## adjacency matrix
M <- matrix(0, S, S) ## Community matrix
m <- S * alpha  ## size of the top module
data_modules <- map(Q_seq, function(Q){
Cw <- C * (1 + Q/(alpha^2 + (1-alpha)^2)) # within block connectance
Cb <- C * (1 - Q/(2 * alpha * (1-alpha))) # between block conenctnve
AB <- matrix(runif(m * (S-m)) < Cb, m , S - m)
K[1:m, 1:m] <- matrix(runif(m^2) < Cw, m, m)
K[(m + 1):S, (m+1):S] <- matrix(runif((S - m)^2) < Cw, S - m, S - m)
K[1:m, (m+1):S] <- AB
K[(m+1):S, 1:m] <- t(AB)
map(1:n, function(i){
mu <- mu_seq[i]
rho <- rho_seq[i]
Sigma <- matrix(c(sigma^2, rho * sigma^2, rho * sigma^2, sigma^2), nrow = 2)
for(i in seq(1, S - 1)) {
for (j in seq(i + 1, S)){
if (K[i,j] > 0){
Z <- mvrnorm(1, c(mu, mu), Sigma) #
M[i,j] <- Z[1]
M[j,i] <- Z[2]
}
}
}
e <- eigen(M, only.values = TRUE)$values
data_frame(x = Re(e), y = Im(e), S = S, mu = mu, rho = rho, Q = Q)
}) %>% bind_rows()
}) %>% bind_rows()
data_modules %>% ggplot(aes(x = x, y = y, colour = factor(mu))) +
geom_point(size = 2.5, alpha = 0.5) +
mytheme + xlab(expression(Re(lambda))) +
ylab(expression(Im(lambda))) +
scale_colour_discrete(name = expression(mu))+
coord_fixed() + facet_grid(Q ~ mu, labeller = label_bquote(cols = paste(mu," = ",.(mu), collapse = ""), rows = paste(Q," = ",.(Q), collapse = "")))
data_modules %>% ggplot(aes(x = x, y = y, colour = factor(mu))) +
geom_point(size = 2.5, alpha = 0.5) +
mytheme + xlab(expression(Re(lambda))) +
ylab(expression(Im(lambda))) +
scale_colour_discrete(name = expression(mu))+
coord_fixed() + facet_grid(Q ~ mu, labeller = label_bquote(cols = paste(mu," = ",.(mu), collapse = ""), rows = paste(Q," = ",.(Q), collapse = "")))
S <- 500
C <- 0.2
alpha <- 1/4
sigma <- 1
mu_seq <- c(-1/4, 0, 1/4)
n <- length(mu_seq)
rho_seq <- c(-1/4, -3/4, -0.5)
Q_seq <- c(-0.5, 0, 0.35) # This is the modularity.
K <- matrix(0, S, S) ## adjacency matrix
M <- matrix(0, S, S) ## Community matrix
m <- S * alpha  ## size of the top module
data_modules <- map(Q_seq, function(Q){
Cw <- C * (1 + Q/(alpha^2 + (1-alpha)^2)) # within block connectance
Cb <- C * (1 - Q/(2 * alpha * (1-alpha))) # between block conenctnve
AB <- matrix(runif(m * (S-m)) < Cb, m , S - m)
K[1:m, 1:m] <- matrix(runif(m^2) < Cw, m, m)
K[(m + 1):S, (m+1):S] <- matrix(runif((S - m)^2) < Cw, S - m, S - m)
K[1:m, (m+1):S] <- AB
K[(m+1):S, 1:m] <- t(AB)
map(1:n, function(i){
mu <- mu_seq[i]
rho <- rho_seq[i]
Sigma <- matrix(c(sigma^2, rho * sigma^2, rho * sigma^2, sigma^2), nrow = 2)
for(i in seq(1, S - 1)) {
for (j in seq(i + 1, S)){
if (K[i,j] > 0){
Z <- mvrnorm(1, c(mu, mu), Sigma) #
M[i,j] <- Z[1]
M[j,i] <- Z[2]
}
}
}
e <- eigen(M, only.values = TRUE)$values
data_frame(x = Re(e), y = Im(e), S = S, mu = mu, rho = rho, Q = Q)
}) %>% bind_rows()
}) %>% bind_rows()
data_modules %>% ggplot(aes(x = x, y = y, colour = factor(mu))) +
geom_point(size = 2.5, alpha = 0.5) +
mytheme + xlab(expression(Re(lambda))) +
ylab(expression(Im(lambda))) +
scale_colour_discrete(name = expression(mu))+
coord_fixed() + facet_grid(Q ~ mu, labeller = label_bquote(cols = paste(mu," = ",.(mu), collapse = ""), rows = paste(Q," = ",.(Q), collapse = "")))
paste(rep(0.01,360),collapse=',')
paste(rep(0.05,360),collapse=',')
paste(rep(0.1,360),collapse=',')
paste(rep(0.2,360),collapse=',')
paste(rep(0.5,360),collapse=',')
setwd('~/Documents/malaria_interventions')
set_parameter <- function(param_data, parameter, value){
param_data$value[param_data$param==parameter] <- value
return(subset(param_data, param==parameter))
}
# Get reference parameter file --------------------------------------------
reference <- readLines('parameter_file_ref.py')
lines <- 1:length(reference)
parameters <- map(lines, function(l){
tmp <- str_sub(reference[l], 1, str_locate(reference[l], '=')[1]-1)
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_values <- map(lines, function(l){
tmp <- str_trim(str_sub(reference[l], str_locate(reference[l], '=')[1]+1, 1000), side = 'both')
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_data <- data.frame(param=str_trim(parameters), value=param_values, stringsAsFactors = F)
library(tidyverse)
library(tidyverse)
setwd('~/Documents/malaria_interventions')
set_parameter <- function(param_data, parameter, value){
param_data$value[param_data$param==parameter] <- value
return(subset(param_data, param==parameter))
}
# Get reference parameter file --------------------------------------------
reference <- readLines('parameter_file_ref.py')
lines <- 1:length(reference)
parameters <- map(lines, function(l){
tmp <- str_sub(reference[l], 1, str_locate(reference[l], '=')[1]-1)
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_values <- map(lines, function(l){
tmp <- str_trim(str_sub(reference[l], str_locate(reference[l], '=')[1]+1, 1000), side = 'both')
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_data <- data.frame(param=str_trim(parameters), value=param_values, stringsAsFactors = F)
# Set parameters ----------------------------------------------------------
experiment <- 'test_01'
# Set parameters ----------------------------------------------------------
experiment <- 'test_01'
param_data[param_data$param=='SAMPLE_DB_FILENAME',] <- set_parameter(param_data, 'SAMPLE_DB_FILENAME', paste('\'\"',experiment,'.sqlite\"\'',sep=''))
View(param_data)
param_data[param_data$param=='BITING_RATE_MEAN',] <- set_parameter(param_data, 'BITING_RATE_MEAN', '[0.0002]')
biting_rate_mathematica <- read_csv(mathematica_file, col_names = c('day','num_mosquitos'))
mathematica_file <- 'mosquito_population_seasonality.csv' # This file contains the number of adult mosquitos for the particular experiment
biting_rate_mathematica <- read_csv(mathematica_file, col_names = c('day','num_mosquitos'))
# Set parameters ----------------------------------------------------------
experiment <- 'test_01'
mathematica_file <- 'mosquito_population_seasonality.csv' # This file contains the number of adult mosquitos for the particular experiment
param_data[param_data$param=='SAMPLE_DB_FILENAME',] <- set_parameter(param_data, 'SAMPLE_DB_FILENAME', paste('\'\"',experiment,'.sqlite\"\'',sep=''))
param_data[param_data$param=='BITING_RATE_MEAN',] <- set_parameter(param_data, 'BITING_RATE_MEAN', '[0.0002]')
biting_rate_mathematica <- read_csv(mathematica_file, col_names = c('day','num_mosquitos'))
experiment <- 'test_01'
mathematica_file <- 'mosquito_population_seasonality.csv' # This file contains the number of adult mosquitos for the particular experiment
param_data[param_data$param=='SAMPLE_DB_FILENAME',] <- set_parameter(param_data, 'SAMPLE_DB_FILENAME', paste('\'\"',experiment,'.sqlite\"\'',sep=''))
param_data[param_data$param=='BITING_RATE_MEAN',] <- set_parameter(param_data, 'BITING_RATE_MEAN', '[0.0002]')
biting_rate_mathematica <- read_csv(mathematica_file, col_names = c('day','num_mosquitos'))
biting_rate_distribution <- biting_rate_mathematica$num_mosquitos
param_data[param_data$param=='DAILY_BITING_RATE_DISTRIBUTION',] <- set_parameter(param_data, 'DAILY_BITING_RATE_DISTRIBUTION', paste('[',paste(biting_rate_distribution, collapse=','),']',sep=''))
# Write to a new paramter file --------------------------------------------
output_file=paste(experiment,'py',sep = '.')
output_file
library(tidyverse)
setwd('~/Documents/malaria_interventions')
set_parameter <- function(param_data, parameter, value){
param_data$value[param_data$param==parameter] <- value
return(subset(param_data, param==parameter))
}
# Get reference parameter file --------------------------------------------
reference <- readLines('parameter_file_ref.py')
lines <- 1:length(reference)
parameters <- map(lines, function(l){
tmp <- str_sub(reference[l], 1, str_locate(reference[l], '=')[1]-1)
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_values <- map(lines, function(l){
tmp <- str_trim(str_sub(reference[l], str_locate(reference[l], '=')[1]+1, 1000), side = 'both')
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_data <- data.frame(param=str_trim(parameters), value=param_values, stringsAsFactors = F)
experiment <- 'test_06'
mathematica_file <- 'mosquito_population_seasonality.csv' # This file contains the number of adult mosquitos for the particular experiment
param_data[param_data$param=='SAMPLE_DB_FILENAME',] <- set_parameter(param_data, 'SAMPLE_DB_FILENAME', paste('\'\"',experiment,'.sqlite\"\'',sep=''))
param_data[param_data$param=='BITING_RATE_MEAN',] <- set_parameter(param_data, 'BITING_RATE_MEAN', '[0.0001]')
biting_rate_mathematica <- read_csv(mathematica_file, col_names = c('day','num_mosquitos'))
biting_rate_distribution <- biting_rate_mathematica$num_mosquitos
param_data[param_data$param=='DAILY_BITING_RATE_DISTRIBUTION',] <- set_parameter(param_data, 'DAILY_BITING_RATE_DISTRIBUTION', paste('[',paste(biting_rate_distribution, collapse=','),']',sep=''))
# Write to a new paramter file --------------------------------------------
output_file=paste(experiment,'py',sep = '.')
param_data$output <- paste(param_data$param,param_data$value,sep='=')
write_lines(param_data$output, output_file)
seasonality <- read_csv('mosquito_population_seasonality.csv', col_names = c('day','num_mosquitos'))
irs <- read_csv('mosquito_population_IRS.csv', col_names = c('day','num_mosquitos'))
seasonality$grp <- 'S'
irs$grp <- 'I'
x <- rbind(seasonality,irs)
head(x)
x %>% ggplot(aes(day, num_mosquitos, color=grp))+geom_line()
# Set parameters ----------------------------------------------------------
experiment <- 'test_07'
mathematica_file <- 'mosquito_population_IRS.csv' # This file contains the number of adult mosquitos for the particular experiment
# Get reference parameter file --------------------------------------------
reference <- readLines('parameter_file_ref.py')
lines <- 1:length(reference)
parameters <- map(lines, function(l){
tmp <- str_sub(reference[l], 1, str_locate(reference[l], '=')[1]-1)
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_values <- map(lines, function(l){
tmp <- str_trim(str_sub(reference[l], str_locate(reference[l], '=')[1]+1, 1000), side = 'both')
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_data <- data.frame(param=str_trim(parameters), value=param_values, stringsAsFactors = F)
# Set parameters ----------------------------------------------------------
experiment <- 'test_07'
mathematica_file <- 'mosquito_population_IRS.csv' # This file contains the number of adult mosquitos for the particular experiment
param_data[param_data$param=='SAMPLE_DB_FILENAME',] <- set_parameter(param_data, 'SAMPLE_DB_FILENAME', paste('\'\"',experiment,'.sqlite\"\'',sep=''))
param_data[param_data$param=='BITING_RATE_MEAN',] <- set_parameter(param_data, 'BITING_RATE_MEAN', '[0.0001]')
biting_rate_mathematica <- read_csv(mathematica_file, col_names = c('day','num_mosquitos'))
biting_rate_distribution <- biting_rate_mathematica$num_mosquitos
param_data[param_data$param=='DAILY_BITING_RATE_DISTRIBUTION',] <- set_parameter(param_data, 'DAILY_BITING_RATE_DISTRIBUTION', paste('[',paste(biting_rate_distribution, collapse=','),']',sep=''))
# Write to a new paramter file --------------------------------------------
output_file=paste(experiment,'py',sep = '.')
param_data$output <- paste(param_data$param,param_data$value,sep='=')
write_lines(param_data$output, output_file)
# Write Midway job file ---------------------------------------------------
job_ref <- readLines('job_file_ref.sbatch')
job_ref
# Write Midway job file ---------------------------------------------------
job_lines <- readLines('job_file_ref.sbatch')
# Write Midway job file ---------------------------------------------------
select_if_null <- function(x, null_option, non_null_option){
if (is.null(x)){
value <- null_option
} else {
value <- non_null_option
}
return(value)
}
wall_time
experiment
SLURM_ARRAY_RANGE <- '1-2'
paste("exp='",experiment,"'",sep='')
output_file=paste(experiment,'sbatch',sep = '.')
job_lines <- readLines('job_file_ref.sbatch')
wall_time <- '20:00:00'
SLURM_ARRAY_RANGE <- '1-2'
memory <- '16000'
job_lines[2] <- paste('#SBATCH --job-name=',experiment,sep='')
job_lines[3] <- paste('#SBATCH --time=',wall_time,sep='')
job_lines[4] <- paste('#SBATCH --output=slurm_output/',experiment,'_%A_%a.out',sep='')
job_lines[5] <- paste('#SBATCH --error=slurm_output/',experiment,'_%A_%a.err',sep='')
job_lines[6] <- paste('#SBATCH --array=',SLURM_ARRAY_RANGE,sep='')
job_lines[9] <- paste('#SBATCH --mem-per-cpu=',memory,sep='')
job_lines[20] <- paste("exp='",experiment,"'",sep='')
write_lines(job_lines, output_file)
# plots -------------------------------------------------------------------
seasonality <- read_csv('mosquito_population_seasonality.csv', col_names = c('day','num_mosquitos'))
seasonality$grp <- 'S'
irs_09 <- read_csv('mosquito_population_IRS.csv', col_names = c('day','num_mosquitos'))
irs$grp <- 'I_09'
irs$grp <- 'I_90'
irs_90 <- read_csv('mosquito_population_IRS.csv', col_names = c('day','num_mosquitos'))
irs_90$grp <- 'I_90'
irs_95 <- read_csv('mosquito_population_IRS_095.csv', col_names = c('day','num_mosquitos'))
irs_95$grp <- 'I_95'
x <- rbind(seasonality,irs_90,irs_95)
x %>% ggplot(aes(day, num_mosquitos, color=grp))+geom_line()
irs_100 <- read_csv('mosquito_population_IRS_100.csv', col_names = c('day','num_mosquitos'))
irs_100$grp <- 'I_100'
x <- rbind(seasonality,irs_90,irs_95,irs_100)
x %>% ggplot(aes(day, num_mosquitos, color=grp))+geom_line()
irs01 <- read_csv('mosquito_population_IRS01.csv', col_names = c('day','num_mosquitos'))
irs01$grp <- 'IRS01'
seasonality <- read_csv('mosquito_population_seasonality.csv', col_names = c('day','num_mosquitos'))
seasonality$grp <- 'S'
irs01 <- read_csv('mosquito_population_IRS01.csv', col_names = c('day','num_mosquitos'))
irs01$grp <- 'IRS01'
irs02 <- read_csv('mosquito_population_IRS02.csv', col_names = c('day','num_mosquitos'))
irs02$grp <- 'IRS02'
x <- rbind(seasonality,irs01,irs02)
x %>% ggplot(aes(day, num_mosquitos, color=grp))+geom_line()
library(tidyverse)
setwd('~/Documents/malaria_interventions')
set_parameter <- function(param_data, parameter, value){
param_data$value[param_data$param==parameter] <- value
return(subset(param_data, param==parameter))
}
# Get reference parameter file --------------------------------------------
reference <- readLines('parameter_file_ref.py')
lines <- 1:length(reference)
parameters <- map(lines, function(l){
tmp <- str_sub(reference[l], 1, str_locate(reference[l], '=')[1]-1)
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_values <- map(lines, function(l){
tmp <- str_trim(str_sub(reference[l], str_locate(reference[l], '=')[1]+1, 1000), side = 'both')
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_data <- data.frame(param=str_trim(parameters), value=param_values, stringsAsFactors = F)
experiment <- 'test_07'
mathematica_file <- 'mosquito_population_seasonality.csv' # This file contains the number of adult mosquitos for the particular experiment
param_data[param_data$param=='SAMPLE_DB_FILENAME',] <- set_parameter(param_data, 'SAMPLE_DB_FILENAME', paste('\'\"',experiment,'.sqlite\"\'',sep=''))
param_data[param_data$param=='BITING_RATE_MEAN',] <- set_parameter(param_data, 'BITING_RATE_MEAN', '[0.00005]')
biting_rate_mathematica <- read_csv(mathematica_file, col_names = c('day','num_mosquitos'))
biting_rate_distribution <- biting_rate_mathematica$num_mosquitos
param_data[param_data$param=='DAILY_BITING_RATE_DISTRIBUTION',] <- set_parameter(param_data, 'DAILY_BITING_RATE_DISTRIBUTION', paste('[',paste(biting_rate_distribution, collapse=','),']',sep=''))
# Write to a new paramter file --------------------------------------------
output_file=paste(experiment,'py',sep = '.')
param_data$output <- paste(param_data$param,param_data$value,sep='=')
write_lines(param_data$output, output_file)
# Write Midway job file ---------------------------------------------------
output_file=paste(experiment,'sbatch',sep = '.')
job_lines <- readLines('job_file_ref.sbatch')
wall_time <- '20:00:00'
SLURM_ARRAY_RANGE <- '1'
memory <- '16000'
job_lines[2] <- paste('#SBATCH --job-name=',experiment,sep='')
job_lines[3] <- paste('#SBATCH --time=',wall_time,sep='')
job_lines[4] <- paste('#SBATCH --output=slurm_output/',experiment,'_%A_%a.out',sep='')
job_lines[5] <- paste('#SBATCH --error=slurm_output/',experiment,'_%A_%a.err',sep='')
job_lines[6] <- paste('#SBATCH --array=',SLURM_ARRAY_RANGE,sep='')
job_lines[9] <- paste('#SBATCH --mem-per-cpu=',memory,sep='')
job_lines[20] <- paste("exp='",experiment,"'",sep='')
write_lines(job_lines, output_file)
# Get reference parameter file --------------------------------------------
reference <- readLines('parameter_file_ref.py')
lines <- 1:length(reference)
parameters <- map(lines, function(l){
tmp <- str_sub(reference[l], 1, str_locate(reference[l], '=')[1]-1)
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_values <- map(lines, function(l){
tmp <- str_trim(str_sub(reference[l], str_locate(reference[l], '=')[1]+1, 1000), side = 'both')
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_data <- data.frame(param=str_trim(parameters), value=param_values, stringsAsFactors = F)
# Set parameters ----------------------------------------------------------
experiment <- 'test_08'
mathematica_file <- 'mosquito_population_IRS01.csv' # This file contains the number of adult mosquitos for the particular experiment
param_data[param_data$param=='SAMPLE_DB_FILENAME',] <- set_parameter(param_data, 'SAMPLE_DB_FILENAME', paste('\'\"',experiment,'.sqlite\"\'',sep=''))
param_data[param_data$param=='BITING_RATE_MEAN',] <- set_parameter(param_data, 'BITING_RATE_MEAN', '[0.00005]')
biting_rate_mathematica <- read_csv(mathematica_file, col_names = c('day','num_mosquitos'))
biting_rate_distribution <- biting_rate_mathematica$num_mosquitos
param_data[param_data$param=='DAILY_BITING_RATE_DISTRIBUTION',] <- set_parameter(param_data, 'DAILY_BITING_RATE_DISTRIBUTION', paste('[',paste(biting_rate_distribution, collapse=','),']',sep=''))
# Write to a new paramter file --------------------------------------------
output_file=paste(experiment,'py',sep = '.')
param_data$output <- paste(param_data$param,param_data$value,sep='=')
write_lines(param_data$output, output_file)
# Write Midway job file ---------------------------------------------------
output_file=paste(experiment,'sbatch',sep = '.')
job_lines <- readLines('job_file_ref.sbatch')
wall_time <- '20:00:00'
SLURM_ARRAY_RANGE <- '1'
memory <- '16000'
job_lines[2] <- paste('#SBATCH --job-name=',experiment,sep='')
job_lines[3] <- paste('#SBATCH --time=',wall_time,sep='')
job_lines[4] <- paste('#SBATCH --output=slurm_output/',experiment,'_%A_%a.out',sep='')
job_lines[5] <- paste('#SBATCH --error=slurm_output/',experiment,'_%A_%a.err',sep='')
job_lines[6] <- paste('#SBATCH --array=',SLURM_ARRAY_RANGE,sep='')
job_lines[9] <- paste('#SBATCH --mem-per-cpu=',memory,sep='')
job_lines[20] <- paste("exp='",experiment,"'",sep='')
write_lines(job_lines, output_file)
# Get reference parameter file --------------------------------------------
reference <- readLines('parameter_file_ref.py')
lines <- 1:length(reference)
parameters <- map(lines, function(l){
tmp <- str_sub(reference[l], 1, str_locate(reference[l], '=')[1]-1)
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_values <- map(lines, function(l){
tmp <- str_trim(str_sub(reference[l], str_locate(reference[l], '=')[1]+1, 1000), side = 'both')
if(!is.na(tmp)){return(tmp)}
}) %>% combine()
param_data <- data.frame(param=str_trim(parameters), value=param_values, stringsAsFactors = F)
# Set parameters ----------------------------------------------------------
experiment <- 'test_09'
mathematica_file <- 'mosquito_population_IRS02.csv' # This file contains the number of adult mosquitos for the particular experiment
param_data[param_data$param=='SAMPLE_DB_FILENAME',] <- set_parameter(param_data, 'SAMPLE_DB_FILENAME', paste('\'\"',experiment,'.sqlite\"\'',sep=''))
param_data[param_data$param=='BITING_RATE_MEAN',] <- set_parameter(param_data, 'BITING_RATE_MEAN', '[0.00005]')
biting_rate_mathematica <- read_csv(mathematica_file, col_names = c('day','num_mosquitos'))
biting_rate_distribution <- biting_rate_mathematica$num_mosquitos
param_data[param_data$param=='DAILY_BITING_RATE_DISTRIBUTION',] <- set_parameter(param_data, 'DAILY_BITING_RATE_DISTRIBUTION', paste('[',paste(biting_rate_distribution, collapse=','),']',sep=''))
# Write to a new paramter file --------------------------------------------
output_file=paste(experiment,'py',sep = '.')
param_data$output <- paste(param_data$param,param_data$value,sep='=')
write_lines(param_data$output, output_file)
# Write Midway job file ---------------------------------------------------
output_file=paste(experiment,'sbatch',sep = '.')
job_lines <- readLines('job_file_ref.sbatch')
wall_time <- '20:00:00'
SLURM_ARRAY_RANGE <- '1'
memory <- '16000'
job_lines[2] <- paste('#SBATCH --job-name=',experiment,sep='')
job_lines[3] <- paste('#SBATCH --time=',wall_time,sep='')
job_lines[4] <- paste('#SBATCH --output=slurm_output/',experiment,'_%A_%a.out',sep='')
job_lines[5] <- paste('#SBATCH --error=slurm_output/',experiment,'_%A_%a.err',sep='')
job_lines[6] <- paste('#SBATCH --array=',SLURM_ARRAY_RANGE,sep='')
job_lines[9] <- paste('#SBATCH --mem-per-cpu=',memory,sep='')
job_lines[20] <- paste("exp='",experiment,"'",sep='')
write_lines(job_lines, output_file)
